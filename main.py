import os
import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not API_TOKEN:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Railway Environment Variables.")
    exit(1)

# ========================
# –ù–ê–°–¢–†–û–ô–ö–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê - –í–ê–®–ò –î–ê–ù–ù–´–ï
# ========================

ADMIN_IDS = [8341024077]  # –í–∞—à ID: 8341024077
ADMIN_USERNAME = "Paymentprosu"  # –í–∞—à username: Paymentprosu
ADMIN_CONTACT = "the_boss_manger"  # –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: the_boss_manger

# –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
PAYMENT_METHODS = [
    {
        "id": "sber",
        "name": "–°–±–µ—Ä–±–∞–Ω–∫", 
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1234 5678 9012 3456\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
    },
    {
        "id": "tinkoff",
        "name": "–¢–∏–Ω—å–∫–æ—Ñ—Ñ",
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 5678 9012 3456 7890\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤"
    }
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_payment = State()

# ========================
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# ========================
def is_admin(user_id: int, username: str = None) -> bool:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID
    if user_id in ADMIN_IDS:
        return True
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ username
    if username and username.lower() == ADMIN_USERNAME.lower():
        return True
        
    return False

# ========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ========================
def init_db():
    try:
        conn = sqlite3.connect('shop.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                price REAL NOT NULL,
                photo_url TEXT,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                product_id INTEGER,
                product_name TEXT,
                amount REAL,
                order_date TEXT NOT NULL,
                order_time TEXT NOT NULL,
                payment_method TEXT,
                payment_details TEXT,
                admin_contact TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('SELECT COUNT(*) FROM products')
        if cursor.fetchone()[0] == 0:
            products = [
                ("–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –ø–æ–¥ –∫–ª—é—á", 1000, "https://via.placeholder.com/300x200.png?text=–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"),
                ("–î–∏–∑–∞–π–Ω", "UI/UX –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", 2000, "https://via.placeholder.com/300x200.png?text=–î–∏–∑–∞–π–Ω"),
                ("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è 1 —á–∞—Å", 3000, "https://via.placeholder.com/300x200.png?text=–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
            ]
            cursor.executemany('INSERT INTO products (name, description, price, photo_url) VALUES (?, ?, ?, ?)', products)
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# ========================
# –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø ID
# ========================
@dp.message_handler(commands=['myid'])
async def get_my_id(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    admin_status = is_admin(user_id, username)
    
    response = (
        f"üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n"
        f"‚Ä¢ **ID:** `{user_id}`\n"
        f"‚Ä¢ **Username:** @{username if username else '–Ω–µ—Ç'}\n"
        f"‚Ä¢ **–ò–º—è:** {first_name}\n"
        f"‚Ä¢ **–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞:** {'‚úÖ –î–ê' if admin_status else '‚ùå –ù–ï–¢'}\n\n"
        f"**–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:** @{ADMIN_CONTACT}\n"
        f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** @{ADMIN_USERNAME}\n\n"
        f"**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞:**\n"
        f"‚Ä¢ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: `{ADMIN_IDS[0]}`\n"
        f"‚Ä¢ Username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: @{ADMIN_USERNAME}"
    )
    
    await message.answer(response, parse_mode='Markdown')

# ========================
# –ö–æ–º–∞–Ω–¥–∞ /start
# ========================
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_shop"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu_contacts")
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if is_admin(user_id, username):
        buttons.append(InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω", callback_data="menu_admin"))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) - –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    keyboard.add(*buttons)
    
    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# ========================
# –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK-–ó–ê–ü–†–û–°–û–í
# ========================
@dp.callback_query_handler(lambda call: True)
async def handle_all_callbacks(call: types.CallbackQuery):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å–Ω–∞—á–∞–ª–∞
        await call.answer()
        
        if call.data == "menu_contacts":
            await handle_contacts(call)
        elif call.data == "menu_admin":
            await handle_admin(call)
        elif call.data == "menu_shop":
            await handle_shop(call)
        elif call.data == "menu_main":
            await handle_main_menu(call)
        elif call.data.startswith("product_"):
            await handle_product(call)
        else:
            await call.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ù–¢–ê–ö–¢–û–í
# ========================
async def handle_contacts(call: types.CallbackQuery):
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_main"))
    
    contact_text = (
        f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã**\n\n"
        f"**–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:**\n"
        f"üë§ @{ADMIN_CONTACT}\n\n"
        f"**–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:**\n"
        f"‚Ä¢ –ü–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ\n\n"
        f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** @{ADMIN_USERNAME}\n"
        f"**‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** 1-2 —á–∞—Å–∞\n"
        f"**üïí –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:** 10:00 - 22:00"
    )
    
    try:
        await call.message.edit_text(
            contact_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(contact_text, parse_mode='Markdown', reply_markup=keyboard)

# ========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò
# ========================
async def handle_admin(call: types.CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username
    
    if is_admin(user_id, username):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—à–µ–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_main"))
        
        admin_text = (
            f"üë®‚Äçüíº **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            f"**üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n"
            f"‚Ä¢ ID: `{user_id}`\n"
            f"‚Ä¢ Username: @{username if username else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
            f"**üë• –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: @{ADMIN_CONTACT}\n"
            f"‚Ä¢ –í–∞—à username: @{ADMIN_USERNAME}\n\n"
            f"**‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂"
        )
        
        await call.message.edit_text(
            admin_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    else:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)

# ========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ú–ê–ì–ê–ó–ò–ù–ê
# ========================
async def handle_shop(call: types.CallbackQuery):
    products = [
        {"id": 1, "name": "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "price": 1000},
        {"id": 2, "name": "–î–∏–∑–∞–π–Ω", "price": 2000},
        {"id": 3, "name": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "price": 3000}
    ]
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for product in products:
        keyboard.add(InlineKeyboardButton(
            f"üí∞ {product['name']} - {product['price']}‚ÇΩ", 
            callback_data=f"product_{product['id']}"
        ))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_main"))
    
    await call.message.edit_text(
        "üõçÔ∏è **–ú–∞–≥–∞–∑–∏–Ω —É—Å–ª—É–≥**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# ========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
# ========================
async def handle_main_menu(call: types.CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_shop"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu_contacts")
    ]
    
    if is_admin(user_id, username):
        buttons.append(InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω", callback_data="menu_admin"))
    
    keyboard.add(*buttons)
    
    await call.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# ========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–û–í–ê–†–û–í
# ========================
async def handle_product(call: types.CallbackQuery):
    product_id = call.data.split("_")[1]
    
    products = {
        "1": {"name": "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "price": 1000, "desc": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –ø–æ–¥ –∫–ª—é—á"},
        "2": {"name": "–î–∏–∑–∞–π–Ω", "price": 2000, "desc": "UI/UX –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"},
        "3": {"name": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "price": 3000, "desc": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è 1 —á–∞—Å"}
    }
    
    product = products.get(product_id)
    if product:
        await call.message.answer(
            f"üéÅ **{product['name']}**\n\n"
            f"üíµ **–¶–µ–Ω–∞:** {product['price']}‚ÇΩ\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {product['desc']}\n\n"
            f"üí≥ **–î–ª—è –ø–æ–∫—É–ø–∫–∏:**\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'\n"
            f"2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
            f"3. –ù–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å'",
            parse_mode='Markdown'
        )
    else:
        await call.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

# ========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
# ========================
@dp.message_handler()
async def handle_messages(message: types.Message):
    if message.text.startswith('/'):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /myid —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à ID")
    else:
        await message.answer(f"–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @{ADMIN_CONTACT}")

# ========================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ========================
if __name__ == "__main__":
    logger.info("=" * 50)
    logger.info("–ó–ê–ü–£–°–ö –ë–û–¢–ê")
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{ADMIN_USERNAME} (ID: {ADMIN_IDS[0]})")
    logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @{ADMIN_CONTACT}")
    logger.info("=" * 50)
    
    init_db()
    
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï: {e}")
