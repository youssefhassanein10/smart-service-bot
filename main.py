import os
import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω API_TOKEN. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Render Environment Variables.")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USERNAME = "paymentprosu"
ADMIN_IDS = [8341024077]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID Telegram

# –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
PAYMENT_METHODS = [
    {
        "id": "sber",
        "name": "–°–±–µ—Ä–±–∞–Ω–∫",
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1234 5678 9012 3456\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
    },
    {
        "id": "tbank", 
        "name": "–¢-–ë–∞–Ω–∫",
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 2345 6789 0123 4567\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤"
    },
    {
        "id": "alpha",
        "name": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 3456 7890 1234 5678\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤"
    }
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_payment = State()

# ========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ========================
def init_db():
    try:
        conn = sqlite3.connect('shop.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                price REAL NOT NULL,
                photo_url TEXT,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                product_id INTEGER,
                product_name TEXT,
                amount REAL,
                order_date TEXT NOT NULL,
                order_time TEXT NOT NULL,
                payment_method TEXT,
                payment_details TEXT,
                admin_contact TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute('SELECT COUNT(*) FROM products')
        if cursor.fetchone()[0] == 0:
            products = [
                ("–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –ø–æ–¥ –∫–ª—é—á", 1000, "https://via.placeholder.com/300x200.png?text=–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"),
                ("–î–∏–∑–∞–π–Ω", "UI/UX –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", 2000, "https://via.placeholder.com/300x200.png?text=–î–∏–∑–∞–π–Ω"),
                ("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è 1 —á–∞—Å", 3000, "https://via.placeholder.com/300x200.png?text=–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
            ]
            cursor.executemany('INSERT INTO products (name, description, price, photo_url) VALUES (?, ?, ?, ?)', products)
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def get_products():
    conn = sqlite3.connect('shop.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM products WHERE is_active = TRUE')
    products = cursor.fetchall()
    conn.close()
    return products

def get_product(product_id):
    conn = sqlite3.connect('shop.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM products WHERE id = ?', (product_id,))
    product = cursor.fetchone()
    conn.close()
    return product

def create_order(user_id, username, product_id, product_name, amount, order_date, order_time, payment_method):
    conn = sqlite3.connect('shop.db', check_same_thread=False)
    cursor = conn.cursor()
    
    payment_details = next((pm["details"] for pm in PAYMENT_METHODS if pm["name"] == payment_method), "")
    
    cursor.execute('''
        INSERT INTO orders (user_id, username, product_id, product_name, amount, 
                          order_date, order_time, payment_method, payment_details, admin_contact)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, username, product_id, product_name, amount, 
          order_date, order_time, payment_method, payment_details, ADMIN_USERNAME))
    
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return order_id

def validate_date(date_text):
    try:
        datetime.strptime(date_text, '%d.%m.%Y')
        return True
    except ValueError:
        return False

def validate_time(time_text):
    try:
        datetime.strptime(time_text, '%H:%M')
        return True
    except ValueError:
        return False

# ========================
# –ö–æ–º–∞–Ω–¥–∞ /start
# ========================
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_shop"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu_contacts")
    ]
    
    if message.from_user.id in ADMIN_IDS:
        buttons.append(InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω", callback_data="menu_admin"))
    
    keyboard.add(*buttons)
    
    await message.reply(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# ========================
# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
# ========================
@dp.callback_query_handler(lambda call: True)
async def handle_callback_query(call: types.CallbackQuery, state: FSMContext):
    try:
        # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å–Ω–∞—á–∞–ª–∞
        await call.answer()
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback: {call.data}")
        
        if call.data == "menu_shop":
            await show_shop_menu(call.message)
        elif call.data == "menu_contacts":
            await show_contacts(call.message)
        elif call.data == "menu_admin":
            await show_admin_panel(call.message)
        elif call.data == "menu_main":
            await show_main_menu(call.message)
        elif call.data.startswith("product_"):
            product_id = int(call.data.split("_")[1])
            await show_product(call.message, product_id)
        elif call.data.startswith("buy_"):
            product_id = int(call.data.split("_")[1])
            await start_order(call.message, state, product_id)
        elif call.data.startswith("pay_"):
            await process_payment(call, state)
        else:
            await call.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ========================
# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ========================
async def show_main_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_shop"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu_contacts")
    ]
    
    if message.from_user.id in ADMIN_IDS:
        buttons.append(InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω", callback_data="menu_admin"))
    
    keyboard.add(*buttons)
    
    await message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# ========================
# –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
# ========================
async def show_shop_menu(message: types.Message):
    products = get_products()
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for product in products:
        keyboard.add(InlineKeyboardButton(
            f"{product[1]} - {product[3]:,}‚ÇΩ", 
            callback_data=f"product_{product[0]}"
        ))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_main"))
    
    await message.edit_text(
        "üõçÔ∏è **–ù–∞—à –º–∞–≥–∞–∑–∏–Ω —É—Å–ª—É–≥**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# ========================
# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä
# ========================
async def show_product(message: types.Message, product_id: int):
    product = get_product(product_id)
    
    if not product:
        await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_shop"))
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
    await message.delete()
    await bot.send_photo(
        message.chat.id,
        product[4],
        caption=f"üéÅ **{product[1]}**\n\nüìù {product[2]}\n\nüíµ **–¶–µ–Ω–∞: {product[3]:,}‚ÇΩ**",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# ========================
# –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑
# ========================
async def start_order(message: types.Message, state: FSMContext, product_id: int):
    product = get_product(product_id)
    
    if not product:
        await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    async with state.proxy() as data:
        data['product'] = product
        data['product_id'] = product_id
    
    await OrderStates.waiting_for_date.set()
    await message.answer(
        f"üéÅ –¢–æ–≤–∞—Ä: **{product[1]}**\nüíµ –°—É–º–º–∞: **{product[3]:,}‚ÇΩ**\n\n"
        f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì**:\n"
        f"–ü—Ä–∏–º–µ—Ä: {datetime.now().strftime('%d.%m.%Y')}",
        parse_mode='Markdown'
    )

# ========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
# ========================
@dp.message_handler(state=OrderStates.waiting_for_date)
async def process_order_date(message: types.Message, state: FSMContext):
    if not validate_date(message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    async with state.proxy() as data:
        data['order_date'] = message.text
    
    await OrderStates.next()
    await message.answer("‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:\n–ü—Ä–∏–º–µ—Ä: 14:30")

# ========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
# ========================
@dp.message_handler(state=OrderStates.waiting_for_time)
async def process_order_time(message: types.Message, state: FSMContext):
    if not validate_time(message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return
    
    async with state.proxy() as data:
        data['order_time'] = message.text
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    for payment in PAYMENT_METHODS:
        keyboard.add(InlineKeyboardButton(f"üí≥ {payment['name']}", callback_data=f"pay_{payment['id']}"))
    
    await OrderStates.next()
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

# ========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
# ========================
async def process_payment(call: types.CallbackQuery, state: FSMContext):
    payment_id = call.data.split("_")[1]
    payment_method = next((pm for pm in PAYMENT_METHODS if pm["id"] == payment_id), None)
    
    if not payment_method:
        await call.message.answer("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    async with state.proxy() as data:
        product = data['product']
        order_date = data['order_date']
        order_time = data['order_time']
    
    order_id = create_order(
        user_id=call.from_user.id,
        username=call.from_user.username or call.from_user.first_name,
        product_id=product[0],
        product_name=product[1],
        amount=product[3],
        order_date=order_date,
        order_time=order_time,
        payment_method=payment_method['name']
    )
    
    text = (
        f"üí≥ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {payment_method['name']}**\n\n"
        f"üìã **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**\n"
        f"‚Ä¢ –ù–æ–º–µ—Ä: #{order_id}\n‚Ä¢ –¢–æ–≤–∞—Ä: {product[1]}\n"
        f"‚Ä¢ –°—É–º–º–∞: {product[3]:,}‚ÇΩ\n‚Ä¢ –î–∞—Ç–∞: {order_date}\n‚Ä¢ –í—Ä–µ–º—è: {order_time}\n\n"
        f"üè¶ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n{payment_method['details']}\n\n"
        f"‚úÖ **–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:**\n"
        f"1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã\n"
        f"2. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}\n"
        f"3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ #{order_id}"
    )
    
    await call.message.answer(text, parse_mode='Markdown')
    await state.finish()

# ========================
# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
# ========================
async def show_contacts(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_main"))
    
    await message.edit_text(
        f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã**\n\n"
        f"–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        f"üë§ {ADMIN_USERNAME}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º!",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# ========================
# –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# ========================
async def show_admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_main"))
    
    await message.edit_text(
        f"üë®‚Äçüíº **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {paymentprosu}",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# ========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ========================
@dp.message_handler()
async def unknown_message(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

# ========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ========================
if name == "__main__":
    try:
        init_db()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
