import os
import logging
from aiogram import Bot, Dispatcher, executor, types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not API_TOKEN:
    logger.error("‚ùå –¢–û–ö–ï–ù –ù–ï –ù–ê–ô–î–ï–ù!")
    logger.error("–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ Environment Variables –Ω–∞ Railway")
else:
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω!")
    logger.info(f"–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(API_TOKEN)}")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")

@dp.message_handler(commands=['test'])
async def send_test(message: types.Message):
    await message.answer("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {message.text}")

if __name__ == "__main__":
    if API_TOKEN:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        executor.start_polling(dp, skip_updates=True)
    else:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
