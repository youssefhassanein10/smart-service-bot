import os
import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not API_TOKEN:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Railway Environment Variables.")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –î–ê–ù–ù–´–ï)
ADMIN_IDS = [8341024077]  # –í–∞—à Telegram ID
ADMIN_USERNAME = "@paymentprosu"  # –í–∞—à username –≤ Telegram

# –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
PAYMENT_METHODS = [
    {
        "id": "sber",
        "name": "–°–±–µ—Ä–±–∞–Ω–∫", 
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1234 5678 9012 3456\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
    }
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_payment = State()

# ========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ========================
def init_db():
    try:
        conn = sqlite3.connect('shop.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                price REAL NOT NULL,
                photo_url TEXT,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                product_id INTEGER,
                product_name TEXT,
                amount REAL,
                order_date TEXT NOT NULL,
                order_time TEXT NOT NULL,
                payment_method TEXT,
                payment_details TEXT,
                admin_contact TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute('SELECT COUNT(*) FROM products')
        if cursor.fetchone()[0] == 0:
            products = [
                ("–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –ø–æ–¥ –∫–ª—é—á", 1000, "https://via.placeholder.com/300x200.png?text=–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"),
                ("–î–∏–∑–∞–π–Ω", "UI/UX –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", 2000, "https://via.placeholder.com/300x200.png?text=–î–∏–∑–∞–π–Ω")
            ]
            cursor.executemany('INSERT INTO products (name, description, price, photo_url) VALUES (?, ?, ?, ?)', products)
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# ========================
# –ö–æ–º–∞–Ω–¥–∞ /start (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞)
# ========================
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    ]
    
    if message.from_user.id in ADMIN_IDS:
        buttons.append(InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω", callback_data="admin"))
    
    keyboard.add(*buttons)
    
    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
@dp.callback_query_handler(lambda call: call.data == "shop")
async def show_shop(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer("üõçÔ∏è –≠—Ç–æ —Ä–∞–∑–¥–µ–ª –º–∞–≥–∞–∑–∏–Ω–∞!")

@dp.callback_query_handler(lambda call: call.data == "contacts")  
async def show_contacts(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer(f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {paymentprosu}")

@dp.callback_query_handler(lambda call: call.data == "admin")
async def show_admin(call: types.CallbackQuery):
    await call.answer()
    if call.from_user.id in ADMIN_IDS:
        await call.message.answer("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    else:
        await call.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def echo(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

# ========================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í –°–ê–ú–û–ú –ö–û–ù–¶–ï –§–ê–ô–õ–ê!
# ========================
if __name__ == "__main__":
    logger.info("=" * 50)
    logger.info("–ó–ê–ü–£–°–ö –ë–û–¢–ê –ù–ê RAILWAY")
    logger.info("=" * 50)
    
    init_db()
    
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï: {e}")
