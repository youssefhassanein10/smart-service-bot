import os
import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import qrcode
from io import BytesIO
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API_TOKEN. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Render Environment Variables.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USERNAME = "@paymentprosu"
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID Telegram

# –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
PAYMENT_METHODS = [
    {
        "id": "sber",
        "name": "–°–±–µ—Ä–±–∞–Ω–∫",
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1234 5678 9012 3456\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
    },
    {
        "id": "tbank", 
        "name": "–¢-–ë–∞–Ω–∫",
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 2345 6789 0123 4567\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤"
    },
    {
        "id": "alpha",
        "name": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 3456 7890 1234 5678\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤"
    },
    {
        "id": "mts",
        "name": "–ú–¢–° –ë–∞–Ω–∫", 
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 4567 8901 2345 6789\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ê–Ω–¥—Ä–µ–π –ê–Ω–¥—Ä–µ–µ–≤"
    },
    {
        "id": "ozon",
        "name": "Ozon Bank",
        "details": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 5678 9012 3456 7890\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –î–º–∏—Ç—Ä–∏–π –î–º–∏—Ç—Ä–∏–µ–≤"
    },
    {
        "id": "nspk",
        "name": "QR –ù–°–ü–ö",
        "details": "–û–ø–ª–∞—Ç–∞ –ø–æ QR-–∫–æ–¥—É —á–µ—Ä–µ–∑ –°–ë–ü"
    }
]

# –î–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ù–°–ü–ö
NSPK_ORGANIZATION = {
    "name": "–û–û–û '–í–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'",
    "inn": "1234567890",
    "bank": "–ü–ê–û '–°–±–µ—Ä–±–∞–Ω–∫'"
}

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_payment = State()

class ManualOrderStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_payment = State()
    waiting_for_customer = State()

# ========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ========================
def init_db():
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            price REAL NOT NULL,
            photo_url TEXT,
            is_active BOOLEAN DEFAULT TRUE
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            product_id INTEGER,
            product_name TEXT,
            amount REAL,
            order_date TEXT NOT NULL,
            order_time TEXT NOT NULL,
            payment_method TEXT,
            payment_details TEXT,
            status TEXT DEFAULT 'pending',
            admin_confirmed BOOLEAN DEFAULT FALSE,
            admin_contact TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    cursor.execute('SELECT COUNT(*) FROM products')
    if cursor.fetchone()[0] == 0:
        products = [
            ("–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –ø–æ–¥ –∫–ª—é—á", 1000, "https://via.placeholder.com/300x200.png?text=–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"),
            ("–î–∏–∑–∞–π–Ω", "UI/UX –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", 2000, "https://via.placeholder.com/300x200.png?text=–î–∏–∑–∞–π–Ω"),
            ("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è 1 —á–∞—Å", 3000, "https://via.placeholder.com/300x200.png?text=–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"),
            ("SEO", "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ", 4000, "https://via.placeholder.com/300x200.png?text=SEO"),
            ("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", 5000, "https://via.placeholder.com/300x200.png?text=–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
        ]
        cursor.executemany('INSERT INTO products (name, description, price, photo_url) VALUES (?, ?, ?, ?)', products)
    
    conn.commit()
    conn.close()

# ========================
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
# ========================
def get_products():
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM products WHERE is_active = TRUE')
    products = cursor.fetchall()
    conn.close()
    return products

def get_product(product_id):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM products WHERE id = ?', (product_id,))
    product = cursor.fetchone()
    conn.close()
    return product

def create_order(user_id, username, product_id, product_name, amount, order_date, order_time, payment_method):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    
    payment_details = next((pm["details"] for pm in PAYMENT_METHODS if pm["name"] == payment_method), "")
    
    cursor.execute('''
        INSERT INTO orders (user_id, username, product_id, product_name, amount, 
                          order_date, order_time, payment_method, payment_details, admin_contact)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, username, product_id, product_name, amount, 
          order_date, order_time, payment_method, payment_details, ADMIN_USERNAME))
    
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return order_id

def create_manual_order(product_name, amount, order_date, order_time, payment_method, customer_name):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    
    payment_details = next((pm["details"] for pm in PAYMENT_METHODS if pm["name"] == payment_method), "")
    
    cursor.execute('''
        INSERT INTO orders (product_name, amount, order_date, order_time, 
                          payment_method, payment_details, username, admin_contact, admin_confirmed)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, TRUE)
    ''', (product_name, amount, order_date, order_time, payment_method, 
          payment_details, customer_name, ADMIN_USERNAME))
    
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return order_id

def get_orders():
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders ORDER BY order_date DESC, order_time DESC')
    orders = cursor.fetchall()
    conn.close()
    return orders

# ========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ========================
def validate_date(date_text):
    try:
        datetime.strptime(date_text, '%d.%m.%Y')
        return True
    except ValueError:
        return False

def validate_time(time_text):
    try:
        datetime.strptime(time_text, '%H:%M')
        return True
    except ValueError:
        return False

def generate_qr_code(text):
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(text)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    bio = BytesIO()
    img.save(bio, 'PNG')
    bio.seek(0)
    return bio

# ========================
# 1. –ö–æ–º–∞–Ω–¥–∞ /start
# ========================
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
        InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω", callback_data="admin_panel")
    )
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=kb
    )

# ========================
# 2. –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–∞
# ========================
@dp.callback_query_handler(lambda c: c.data == "shop")
async def show_shop(callback: types.CallbackQuery):
    products = get_products()
    
    kb = InlineKeyboardMarkup(row_width=1)
    for product in products:
        kb.add(InlineKeyboardButton(
            f"{product[1]} - {product[3]:,}‚ÇΩ", 
            callback_data=f"product_{product[0]}"
        ))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    
    await callback.message.edit_text(
        "üõçÔ∏è **–ù–∞—à –º–∞–≥–∞–∑–∏–Ω —É—Å–ª—É–≥**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=kb,
        parse_mode='Markdown'
    )

# ========================
# 3. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
# ========================
@dp.callback_query_handler(lambda c: c.data.startswith("product_"))
async def show_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = get_product(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="shop"))
    
    await callback.message.delete()
    await bot.send_photo(
        callback.from_user.id,
        product[4],
        caption=f"üéÅ **{product[1]}**\n\nüìù {product[2]}\n\nüíµ **–¶–µ–Ω–∞: {product[3]:,}‚ÇΩ**",
        reply_markup=kb,
        parse_mode='Markdown'
    )

# ========================
# 4. –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
# ========================
@dp.callback_query_handler(lambda c: c.data.startswith("buy_"))
async def start_order(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    product = get_product(product_id)
    
    async with state.proxy() as data:
        data['product'] = product
        data['product_id'] = product_id
    
    await OrderStates.waiting_for_date.set()
    await callback.message.answer(
        f"üéÅ –¢–æ–≤–∞—Ä: **{product[1]}**\nüíµ –°—É–º–º–∞: **{product[3]:,}‚ÇΩ**\n\n"
        f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì**:\n"
        f"–ü—Ä–∏–º–µ—Ä: {datetime.now().strftime('%d.%m.%Y')}",
        parse_mode='Markdown'
    )

# ========================
# 5. –í–≤–æ–¥ –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
# ========================
@dp.message_handler(state=OrderStates.waiting_for_date)
async def process_order_date(message: types.Message, state: FSMContext):
    if not validate_date(message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    async with state.proxy() as data:
        data['order_date'] = message.text
    
    await OrderStates.next()
    await message.answer("‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:\n–ü—Ä–∏–º–µ—Ä: 14:30")

# ========================
# 6. –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞
# ========================
@dp.message_handler(state=OrderStates.waiting_for_time)
async def process_order_time(message: types.Message, state: FSMContext):
    if not validate_time(message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return
    
    async with state.proxy() as data:
        data['order_time'] = message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    kb = InlineKeyboardMarkup(row_width=2)
    for payment in PAYMENT_METHODS:
        kb.add(InlineKeyboardButton(f"üí≥ {payment['name']}", callback_data=f"pay_{payment['id']}"))
    
    await OrderStates.next()
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

# ========================
# 7. –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
# ========================
@dp.callback_query_handler(lambda c: c.data.startswith("pay_"), state=OrderStates.waiting_for_payment)
async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    payment_id = callback.data.split("_")[1]
    payment_method = next((pm for pm in PAYMENT_METHODS if pm["id"] == payment_id), None)
    
    async with state.proxy() as data:
        product = data['product']
        order_date = data['order_date']
        order_time = data['order_time']
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order_id = create_order(
        user_id=callback.from_user.id,
        username=callback.from_user.username or callback.from_user.first_name,
        product_id=product[0],
        product_name=product[1],
        amount=product[3],
        order_date=order_date,
        order_time=order_time,
        payment_method=payment_method['name']
    )
    
    # –î–ª—è –ù–°–ü–ö –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    if payment_method['id'] == 'nspk':
        qr_text = f"–ù–°–ü–ö|{order_id}|{product[3]}|{NSPK_ORGANIZATION['name']}"
        qr_img = generate_qr_code(qr_text)
        
        caption = (
            f"üì± **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ QR –ù–°–ü–ö**\n\n"
            f"üè¢ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {NSPK_ORGANIZATION['name']}\n"
            f"üí≥ **–ò–ù–ù:** {NSPK_ORGANIZATION['inn']}\n"
            f"üè¶ **–ë–∞–Ω–∫:** {NSPK_ORGANIZATION['bank']}\n\n"
            f"üìã **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä: #{order_id}\n‚Ä¢ –¢–æ–≤–∞—Ä: {product[1]}\n"
            f"‚Ä¢ –°—É–º–º–∞: {product[3]:,}‚ÇΩ\n‚Ä¢ –î–∞—Ç–∞: {order_date}\n‚Ä¢ –í—Ä–µ–º—è: {order_time}\n\n"
            f"üìû –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}"
        )
        
        await bot.send_photo(callback.from_user.id, qr_img, caption=caption, parse_mode='Markdown')
    else:
        # –î–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        text = (
            f"üí≥ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {payment_method['name']}**\n\n"
            f"üìã **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä: #{order_id}\n‚Ä¢ –¢–æ–≤–∞—Ä: {product[1]}\n"
            f"‚Ä¢ –°—É–º–º–∞: {product[3]:,}‚ÇΩ\n‚Ä¢ –î–∞—Ç–∞: {order_date}\n‚Ä¢ –í—Ä–µ–º—è: {order_time}\n\n"
            f"üè¶ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n{payment_method['details']}\n\n"
            f"‚úÖ **–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:**\n"
            f"1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã\n"
            f"2. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}\n"
            f"3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ #{order_id}"
        )
        
        await callback.message.answer(text, parse_mode='Markdown')
    
    await state.finish()
    await callback.answer()

# ========================
# 8. –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# ========================
@dp.callback_query_handler(lambda c: c.data == "admin_panel")
async def admin_panel(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚ûï –†—É—á–Ω–æ–π –∑–∞–∫–∞–∑", callback_data="manual_order"),
        InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã", callback_data="generate_report"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    await callback.message.edit_text(
        f"üë®‚Äçüíº **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {ADMIN_USERNAME}",
        reply_markup=kb,
        parse_mode='Markdown'
    )

# ========================
# 9. –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–Ω–∞—á–∞–ª–æ)
# ========================
@dp.callback_query_handler(lambda c: c.data == "manual_order")
async def start_manual_order(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    products = get_products()
    kb = InlineKeyboardMarkup(row_width=1)
    for product in products:
        kb.add(InlineKeyboardButton(
            f"{product[1]} - {product[3]:,}‚ÇΩ", 
            callback_data=f"mproduct_{product[0]}"
        ))
    
    await ManualOrderStates.waiting_for_product.set()
    await callback.message.edit_text(
        "üõí **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=kb,
        parse_mode='Markdown'
    )

# ========================
# 10. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
# ========================
@dp.callback_query_handler(lambda c: c.data == "generate_report")
async def generate_report(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    orders = get_orders()
    total_amount = sum(order[5] for order in orders)
    
    report_text = f"üìä **–û–¢–ß–ï–¢**\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
    report_text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,}‚ÇΩ\nüì¶ –ó–∞–∫–∞–∑–æ–≤: {len(orders)}\n\n"
    
    for i, order in enumerate(orders, 1):
        report_text += f"{i}. {order[6]} {order[7]} - {order[4]} - {order[5]:,}‚ÇΩ - {order[8]}\n"
    
    report_text += f"\nüìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_USERNAME}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report_text)
    
    await bot.send_document(callback.from_user.id, open(filename, 'rb'), caption="üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º")

# ========================
# 11. –ö–æ–Ω—Ç–∞–∫—Ç—ã
# ========================
@dp.callback_query_handler(lambda c: c.data == "contacts")
async def show_contacts(callback: types.CallbackQuery):
    await callback.message.edit_text(
        f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã**\n\n"
        f"–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        f"üë§ {ADMIN_USERNAME}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º!",
        parse_mode='Markdown'
    )

# ========================
# 12. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ========================
@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
        InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω", callback_data="admin_panel")
    )
    
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )

# ========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
# ========================
if __name__ == "__main__":
    init_db()
    executor.start_polling(dp, skip_updates=True)
