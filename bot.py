import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API_TOKEN. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Render Environment Variables.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ========================
# 1. –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
# ========================
products = {
    1: {
        "name": "–¢–æ–≤–∞—Ä 1",
        "price": 500,
        "desc": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 1",
        "photo": "https://via.placeholder.com/300x200.png?text=–¢–æ–≤–∞—Ä+1"
    },
    2: {
        "name": "–¢–æ–≤–∞—Ä 2",
        "price": 750,
        "desc": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 2",
        "photo": "https://via.placeholder.com/300x200.png?text=–¢–æ–≤–∞—Ä+2"
    },
    3: {
        "name": "–¢–æ–≤–∞—Ä 3",
        "price": 1200,
        "desc": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 3",
        "photo": "https://via.placeholder.com/300x200.png?text=–¢–æ–≤–∞—Ä+3"
    }
}

# ========================
# 2. –ö–æ–º–∞–Ω–¥–∞ /start
# ========================
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    kb = InlineKeyboardMarkup()
    for pid, item in products.items():
        kb.add(InlineKeyboardButton(item["name"], callback_data=f"product_{pid}"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω üõçÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

# ========================
# 3. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
# ========================
@dp.callback_query_handler(lambda c: c.data.startswith("product_"))
async def show_product(callback: types.CallbackQuery):
    pid = int(callback.data.split("_")[1])
    product = products[pid]

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{pid}"))

    await bot.send_photo(
        callback.from_user.id,
        product["photo"],
        caption=f"üì¶ {product['name']}\nüí∞ –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n\n{product['desc']}",
        reply_markup=kb
    )

# ========================
# 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É (–ø–æ–∫–∞ —Ç–µ—Å—Ç)
# ========================
@dp.callback_query_handler(lambda c: c.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    pid = int(callback.data.split("_")[1])
    product = products[pid]
    await callback.answer(f"{product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ", show_alert=True)

# ========================
# –ó–∞–ø—É—Å–∫
# ========================
if name == "__main__":
    executor.start_polling(dp, skip_updates=True)
